// A shuffle and deshuffle implementation using Mulberry32 PRNG

/**
 * Javascript implementation of Mulberry32 PRNG. This function will be used to replace the
 * default Math.Random() for the shuffle and unshuffle functions.
 * 
 * The function returns the same PRN for the same seed.
 * @param {*} a The numeric seed.
 * @returns A pseudo-random number between 0 and 1.
 */
 function rnd(a) {
  var t = a += 0x6D2B79F5;
  t = Math.imul(t ^ t >>> 15, t | 1);
  t ^= t + Math.imul(t ^ t >>> 7, t | 61);
  return ((t ^ t >>> 14) >>> 0) / 4294967296;
}
/**
 * This generates a random permutation of values from 0 to n-1
 * which will later be used to shuffle the array
 * 
 * This value at ith place of this array(r) is the new position of ith element
 * in shuffled array
 * 
 * ie, shuffled[r[i]] = array[i]
 * 
 * @param {*} n length of the array
 * @param {*} seed numeric seed
 * @returns a permuation of numbers from 0 to n-1
 */
function generate(n, seed) {
  var r = [];
  for(var i=0; i<n;i++) r.push(i);
  while(n) {
    var i = Math.floor(rnd(seed) * n);
    n--;
    var tmp = r[n];
    r[n] = r[i];
    r[i] = tmp;
    seed++;
  }
  return r;
}
/**
 * This function shuffles the array using
 * the random permutation generated by generate().
 * 
 * @param {*} array the array to be shuffled
 * @param {*} seed alphanumeric seed
 * @returns shuffled array
 */
export function shuffle(array, seed) {
  if(typeof(seed) === 'string') seed = hash(seed);
  var r = generate(array.length, seed);
  var a = [];
  for(var i=0; i<array.length; i++) a.push(0);
  for(var i=0;i<array.length;i++) a[i] = array[r[i]];
  return a;
}
/**
 * This function unshuffles the array
 * 
 * @param {*} array the array to be unshuffled
 * @param {*} seed alphanumeric seed
 * @returns unshuffled array
 */
export function unshuffle(array, seed) {
  if(typeof(seed) === 'string') seed = hash(seed);
  var r = generate(array.length, seed);
  var a = [];
  for(var i=0; i<array.length; i++) a.push(0);
  for(var i=0;i<array.length;i++) a[r[i]] = array[i];
  return a;
}
/**
 * String hashing implementation
 * This function converts a string into a numeric hash 
 * 
 * @param {*} str 
 * @returns numeric hash value which is used as seed
 */
function hash(str) {
  var h = 0, b = 1, m = 1000000007;
  for(var i=0; i< str.length;i++) {
    h = (h + b*str.charCodeAt(i)) % m;
    b = (b * 7) % m;
  }
  return h;
}